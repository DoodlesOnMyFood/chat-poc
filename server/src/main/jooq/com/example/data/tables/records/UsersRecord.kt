/*
 * This file is generated by jOOQ.
 */
package com.example.`data`.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Row1
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersRecord() : TableRecordImpl<UsersRecord>(com.example.`data`.tables.Users.USERS), Record1<String?> {

    open var id: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    // -------------------------------------------------------------------------
    // Record1 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row1<String?> = super.fieldsRow() as Row1<String?>
    override fun valuesRow(): Row1<String?> = super.valuesRow() as Row1<String?>
    override fun field1(): Field<String?> = com.example.`data`.tables.Users.USERS.ID
    override fun component1(): String? = id
    override fun value1(): String? = id

    override fun value1(value: String?): UsersRecord {
        set(0, value)
        return this
    }

    override fun values(value1: String?): UsersRecord {
        this.value1(value1)
        return this
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    constructor(id: String? = null): this() {
        this.id = id
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    constructor(value: com.example.`data`.tables.pojos.Users?): this() {
        if (value != null) {
            this.id = value.id
            resetChangedOnNotNull()
        }
    }
}
