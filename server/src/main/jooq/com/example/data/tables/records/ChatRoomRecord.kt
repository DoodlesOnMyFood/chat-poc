/*
 * This file is generated by jOOQ.
 */
package com.example.`data`.tables.records


import java.time.LocalDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ChatRoomRecord() : TableRecordImpl<ChatRoomRecord>(com.example.`data`.tables.ChatRoom.CHAT_ROOM), Record2<UUID?, LocalDateTime?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(1, value)
        get(): LocalDateTime? = get(1) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<UUID?, LocalDateTime?> = super.fieldsRow() as Row2<UUID?, LocalDateTime?>
    override fun valuesRow(): Row2<UUID?, LocalDateTime?> = super.valuesRow() as Row2<UUID?, LocalDateTime?>
    override fun field1(): Field<UUID?> = com.example.`data`.tables.ChatRoom.CHAT_ROOM.ID
    override fun field2(): Field<LocalDateTime?> = com.example.`data`.tables.ChatRoom.CHAT_ROOM.CREATED_AT
    override fun component1(): UUID? = id
    override fun component2(): LocalDateTime? = createdAt
    override fun value1(): UUID? = id
    override fun value2(): LocalDateTime? = createdAt

    override fun value1(value: UUID?): ChatRoomRecord {
        set(0, value)
        return this
    }

    override fun value2(value: LocalDateTime?): ChatRoomRecord {
        set(1, value)
        return this
    }

    override fun values(value1: UUID?, value2: LocalDateTime?): ChatRoomRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised ChatRoomRecord
     */
    constructor(id: UUID? = null, createdAt: LocalDateTime? = null): this() {
        this.id = id
        this.createdAt = createdAt
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised ChatRoomRecord
     */
    constructor(value: com.example.`data`.tables.pojos.ChatRoom?): this() {
        if (value != null) {
            this.id = value.id
            this.createdAt = value.createdAt
            resetChangedOnNotNull()
        }
    }
}
